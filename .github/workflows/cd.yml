name: Deploy

on:
  workflow_dispatch:
  push:
    branches: [main]
jobs:
  Test:
    name: "Testing Builds"
    runs-on: ubuntu-latest
    container:
      image: ubuntu:22.04
    steps:
      # This action checks-out your repository under $GITHUB_WORKSPACE, so your workflow can access it.
      - uses: actions/checkout@v3

      # This action downloads and caches distribution of the requested Node.js version and adds it to the PATH.
      - uses: actions/setup-node@v3
        with:
          node-version: 18

      # CI Stage
      - name: Pre Requisites
        run: |
          npm i
          npm i -g @sap/cds-dk
          cds build --production
  
  Deploy:
    name: Deploy to Kyma
    runs-on: ubuntu-latest
    container:
      image: ubuntu:22.04
    steps:
      - uses: actions/checkout@v3

      # install dependencies required for deployment
      - run: apt-get update -y
      - run: apt-get install software-properties-common -y
      - run: apt-get install curl ca-certificates -y
      - run: apt install sudo

      # kubectl
      - run: curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /etc/apt/keyrings/kubernetes-archive-keyring.gpg add -
      - run: echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
      - run: sudo apt-get update -y
      - run: sudo apt-get install kubectl -y

      # pack
      - run: sudo add-apt-repository ppa:cncf-buildpacks/pack-cli -y
      - run: sudo apt-get update -y
      - run: sudo apt-get install pack-cli -y

      # docker
      - run: sudo apt-get install docker.io -y

      # helm
      - run: curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - uses: actions/setup-node@v3
        with:
          node-version: 16

      # reusable action to deploy on kyma
      - uses: ./.github/actions/deploy
        with:
          DOMAIN: ${{ secrets.DOMAIN }}
          IMAGEREGISTRY: ${{ secrets.IMAGEREGISTRY }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
          IMAGEPULLSECRET: ${{ secrets.IMAGEPULLSECRET }}
